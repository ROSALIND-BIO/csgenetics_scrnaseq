/*
 * -------------------------------------------------
 *  csgenetics_scrnaseq Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Global default params, used in configs
params {
  outdir = './results'
  tracedir = "${params.outdir}/pipeline_info"

  // reference files
  star_index_dir = "s3://csgx.public.readonly/resources/references/refdata-gex-GRCh38-and-mm10-2020-A/star/"
  gtf_path = "s3://csgx.public.readonly/resources/references/refdata-gex-GRCh38-and-mm10-2020-A/genes/genes.gtf"
  whitelist_path = "s3://csgx.public.readonly/resources/whitelists/IDT_IO_kit_v2.csv"
  
  min_nuc_gene = 100
  depth_min = 100000

  sss_nmer = 8

  // AWS Batch
  awsregion = null
  awsqueue = null

  // Defaults only, expecting to be overwritten
  max_memory = 256.GB
  max_cpus = 16
  max_time = 240.h

}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

profiles {
  standard {
        process.executor = 'local'
    }
  docker {
    includeConfig 'conf/images.config'
    docker.enabled=true
  }
  singularity {
    includeConfig 'conf/images.config'
    singularity.enabled=true
  }
  test {
    includeConfig 'conf/test.config'
    includeConfig 'conf/images.config'
    docker.enabled=true
  }
  test_singularity{
    includeConfig 'conf/test.config'
    includeConfig 'conf/images.config'
    singularity.enabled=true
  }
  aws {
    includeConfig 'conf/aws.config'
    includeConfig 'conf/images.config'
  }
  none {
    // Don't load any config (for use with custom home configs)
  }
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
  PYTHONNOUSERSITE = 1
  R_PROFILE_USER = "/.Rprofile"
  R_ENVIRON_USER = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
  overwrite = true
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
  overwrite = true
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
  overwrite = true
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
  overwrite = true
}
manifest {
    name            = 'csgenetics_scrnaseq'
    author          = ''
    homePage        = 'https://github.com/csgenetics/csgenetics_scrnaseq'
    description     = 'Pipeline for processing CS Genetics single cell RNA-Seq data'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=22.03.0-edge'
    version = '0.0.1'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
